{% highlight r %}
eval.iter_err <- TRUE
#eval.iter_err <- !file.exists("iter_err_iossa.RData")
if (eval.iter_err) {
  N <- 150
  L <- 70
  omega2 <- 0.06
  lseq <- c(seq(0.03, 0.058, 0.002), seq(0.062, 0.1, 0.002))
  F2.real <- 1.2 * sin(2 * pi * omega2 * (1:N))
  iter0 <-
    sapply(lseq,
           function(omega1) {
             F <- sin(2 * pi * omega1 * (1:N)) + F2.real
             iossa(ssa(F, L),
                   nested.groups = list(1:2, 3:4),
                   kappa = 2, maxiter = 200,
                   trace = FALSE)$iossa.result$iter
           })
  M <- 10 #1000
  set.seed(1)
  est.err <- function() {
    noise <- rnorm(N)
    sapply(lseq,
           function(omega1) {
               F1.real <- sin(2 * pi * omega1 * (1:N))
               F <- F1.real + F2.real + noise
               ss <- iossa(ssa(F, L),
                           nested.groups = list(1:2, 3:4),
                           kappa = 2, maxiter = 200,
                           trace = FALSE)
               omega1.est <-
                   1 / parestimate(ss, groups = list(1:2),
                                   method = "esprit-ls")[[2]][1]
               omega2.est <-
                   1 / parestimate(ss, groups = list(3:4),
                                   method = "esprit-ls")[[2]][1]
               omegas.est <- range(omega1.est, omega2.est)
               if (omega2 < omega1)
                   omegas.est <- rev(omegas.est)
               c(iter = ss$iossa.result$iter,
                 er1 = (omega1 - omegas.est[1])^2,
                 er2 = (omega2 - omegas.est[2])^2)
           })
  }
  res <- replicate(M, est.err())
  iter <- res["iter", , ]
  er1 <- res["er1", , ]
  er2 <- res["er2", , ]
  raw <- list(iter = iter, er1 = er1, er2 = er2)
  #save(lseq, iter0, iter1, raw,
  #     file = "iter_err_iossa.RData") #does not work??
}
# endif (eval.iter_err)
{% endhighlight %}